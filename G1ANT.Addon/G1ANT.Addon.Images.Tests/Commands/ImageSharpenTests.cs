using System;
using System.IO;
using System.Drawing;
using System.Collections.Generic;

using G1ANT.Engine;

using NUnit.Framework;
using G1ANT.Language.Images.Tests.Properties;
using System.Reflection;
using G1ANT.Language.Semantic;

namespace G1ANT.Language.Images.Tests.Commands
{
    [TestFixture]
    public class ImageSharpenTests
    {
        private List<string> paths = new List<string>();

        [OneTimeSetUp]
        public void Initialize()
        {
            Environment.CurrentDirectory = TestContext.CurrentContext.TestDirectory;
        }

        [Test, Timeout(ImagesTests.TestsTimeout)]
        public void NotExistingImageTest()
        {
            string path = @"C:\lolAndLol\lol.png";

            Scripter scripter = new Scripter();

            scripter.Text = $"image.sharpen path {SpecialChars.Text}{path}{SpecialChars.Text}";

            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<DirectoryNotFoundException>(exception.GetBaseException());

        }

        [Test, Timeout(ImagesTests.TestsTimeout)]
        public void SharpenImageTest()
        {
            string image = Assembly.GetExecutingAssembly().UnpackResourceToFile(nameof(Resources.greenRectangle), "bmp");
            string image2 = Assembly.GetExecutingAssembly().UnpackResourceToFile(nameof(Resources.greenInRed), "bmp");

            Scripter scripter = new Scripter();
            scripter.RunLine($"image.sharpen path {SpecialChars.Text}{image}{SpecialChars.Text}");

            scripter.RunLine($"image.expected image1 {SpecialChars.Text}{image}{SpecialChars.Text} image2 {SpecialChars.Text}{image2}{SpecialChars.Text}");
            var result = scripter.Variables.GetVariableValue<bool>("result");
            Assert.AreEqual(false, result);
            
            string image3 = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid()}.bmp");

            scripter.RunLine($"image.sharpen path {SpecialChars.Text}{image2}{SpecialChars.Text} outputpath {SpecialChars.Text}{image3}{SpecialChars.Text}");
            Assert.AreEqual(true, File.Exists(image3));

            scripter.RunLine($"image.expected image2 {SpecialChars.Text}{image3}{SpecialChars.Text} image1 {SpecialChars.Text}{image}{SpecialChars.Text}");
            result = scripter.Variables.GetVariableValue<bool>("result");
            Assert.AreEqual(true, result);
        }

        [Test, Timeout(ImagesTests.TestsTimeout)]
        public void BadOutputPathTest()
        {
            string image = Assembly.GetExecutingAssembly().UnpackResourceToFile(nameof(Resources.greenRectangle), "bmp");
            paths.Add(image);

            string badPath = @"c:\\A(SF9\asf9j0-0\\asfk00asf0a4e9->X>";

            Scripter scripter = new Scripter();            
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.RunLine($"image.sharpen path {SpecialChars.Text}{image}{SpecialChars.Text} outputpath {SpecialChars.Text}{badPath}{SpecialChars.Text}");
            });
            Assert.IsInstanceOf<ArgumentException>(exception.GetBaseException());
        }

    }
}
