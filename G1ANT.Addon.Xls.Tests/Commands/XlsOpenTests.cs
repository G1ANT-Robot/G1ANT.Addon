using System;
using System.IO;

using G1ANT.Engine;
using NUnit.Framework;
using System.Reflection;
using G1ANT.Addon.Xls.Tests.Properties;
using G1ANT.Language;

namespace G1ANT.Addon.Xls.Tests
{
    [TestFixture]
    public class XlsOpenTests
    {
        static Scripter scripter;
        string file;
        [OneTimeSetUp]
        [Timeout(20000)]
        public void ClassInit()
        {
            Environment.CurrentDirectory = TestContext.CurrentContext.TestDirectory;
            file = Assembly.GetExecutingAssembly().UnpackResourceToFile(nameof(Resources.XlsTestWorkbook), "xlsx");
        }
        [SetUp]
        public void testinit()
        {
            Language.Addon addon = Language.Addon.Load(@"G1ANT.Addon.Xls.dll");
            scripter = new Scripter();
        }
        [Test]
        [Timeout(20000)]
        public void XlsFileOpenTest()
        {
            scripter.RunLine($"xls.open  {SpecialChars.Text}{file}{SpecialChars.Text} result id");
            Assert.AreNotEqual(-1, scripter.Variables.GetVariableValue<int>("id"));
        }

        [Test]
        [Timeout(20000)]
        public void FileAccessModeTest()
        {
            scripter.RunLine($"xls.open  {SpecialChars.Text}{file}{SpecialChars.Text} result id accessmode read");
            Assert.AreNotEqual(-1, scripter.Variables.GetVariableValue<int>("id"));
            scripter.RunLine("xls.setvalue 123 position A1");
            scripter.RunLine("xls.close");
            Assert.IsTrue(Initializer.AreEqual(File.ReadAllBytes(file), Properties.Resources.XlsTestWorkbook));

            System.Threading.Thread.Sleep(1000);

            scripter.RunLine($"xls.open  {SpecialChars.Text}{file}{SpecialChars.Text} result id accessmode readwrite");
            Assert.AreNotEqual(-1, scripter.Variables.GetVariableValue<int>("id"));
            scripter.RunLine("xls.setvalue 123 position A1");
            scripter.RunLine("xls.close");
            Assert.IsFalse(Initializer.AreEqual(File.ReadAllBytes(file), Properties.Resources.XlsTestWorkbook));
        }

        [Test]
        [Timeout(20000)]
        public void IvalidAccessModeTest()
        {
            scripter.Text = ($"xls.open {SpecialChars.Text}{file}{SpecialChars.Text} accessmode abc123");
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<ArgumentOutOfRangeException>(exception.GetBaseException());
            
        }

        [Test]
        [Timeout(20000)]
        public void InvalidPathTest()
        {
            string path = @"c:\Not esxisting file.xlsx";
            if (File.Exists(path))
            {
                Assert.Inconclusive($"File '{path}' exist");
            }
            scripter.Text = $"xls.open  {SpecialChars.Text}{path}{SpecialChars.Text} result id";
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<FileNotFoundException>(exception.GetBaseException());
        }

        [Test]
        [Timeout(20000)]
        public void InvalidPathFormatTest()
        {
            string path = @"!c:\\\!#^&.xls";
            scripter.Text = $"xls.open  {SpecialChars.Text}{path}{SpecialChars.Text} result id";
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<NotSupportedException>(exception.GetBaseException());
            
        }

        [Test]
        [Timeout(20000)]
        public void InvalidFormatTest()
        {
            throw new NotImplementedException();
            string path = null;//TODO Path.Combine(Initializer.DirectoryPath, "test file.xls");
            scripter.Text = $"xls.open  {SpecialChars.Text}{path}{SpecialChars.Text} result id";
            
            if (File.Exists(path))
            {
                Assert.Inconclusive($"Test aborted becouse file '{path}' already exists.");
            }
            File.WriteAllText(path, "!@#$%^&*()");
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<FileFormatException>(exception.GetBaseException());
            if (File.Exists(path))
            {
                File.Delete(path);
            }
        }

        [TearDown]
        [Timeout(20000)]
        public void TestCleanUp()
        {
            try
            {
                scripter.RunLine("xls.close");
            }
            catch { }
        }
    }
}
